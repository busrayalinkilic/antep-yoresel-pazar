{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport function getProductsSuccess(products) {\n  return {\n    type: actionTypes.GET_PRODUCTS_SUCCESS,\n    payload: products\n  }; //getcategoriessuccess için yeni state'imiz categories olacak demek\n}\nexport function createProductSuccess(product) {\n  return {\n    type: actionTypes.CREATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function updateProductSuccess(product) {\n  return {\n    type: actionTypes.UPDATE_PRODUCT_SUCCESS,\n    payload: product\n  };\n}\nexport function saveProductApi(product) {\n  return fetch(\"http://localhost:3000/products/\" + (product.id || \"\"), {\n    method: product.id ? \"PUT\" : \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(product)\n  }).then(handleResponse).catch(handleError);\n}\nexport function saveProduct(product) {\n  return function (dispatch) {\n    return saveProductApi(product).then(saveProduct => {\n      product.id ? dispatch(updateProductSuccess(saveProduct)) : dispatch(createProductSuccess(saveProduct));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport async function handleResponse(response) {\n  if (response.ok) {\n    return response.json();\n  }\n\n  const error = await response.text();\n  throw new Error(error);\n}\nexport function handleError(error) {\n  throw error;\n}\nexport function getProducts(categoryId) {\n  return function (dispatch) {\n    let url = \"http://localhost:3000/products\";\n\n    if (categoryId) {\n      url = url + \"?categoryId=\" + categoryId;\n    }\n\n    return fetch(url).then(response => response.json()).then(result => dispatch(getProductsSuccess(result))); //dispatch=yakalamak,ele geçirmek\n  };\n}","map":{"version":3,"sources":["C:/reactcourse/northwind-redux/src/redux/actions/productActions.js"],"names":["actionTypes","getProductsSuccess","products","type","GET_PRODUCTS_SUCCESS","payload","createProductSuccess","product","CREATE_PRODUCT_SUCCESS","updateProductSuccess","UPDATE_PRODUCT_SUCCESS","saveProductApi","fetch","id","method","headers","body","JSON","stringify","then","handleResponse","catch","handleError","saveProduct","dispatch","error","response","ok","json","text","Error","getProducts","categoryId","url","result"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,SAAO;AAAEC,IAAAA,IAAI,EAAEH,WAAW,CAACI,oBAApB;AAA0CC,IAAAA,OAAO,EAAEH;AAAnD,GAAP,CAD2C,CAE3C;AACD;AAED,OAAO,SAASI,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,SAAO;AAAEJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,sBAApB;AAA4CH,IAAAA,OAAO,EAAEE;AAArD,GAAP;AACD;AAED,OAAO,SAASE,oBAAT,CAA8BF,OAA9B,EAAuC;AAC5C,SAAO;AAAEJ,IAAAA,IAAI,EAAEH,WAAW,CAACU,sBAApB;AAA4CL,IAAAA,OAAO,EAAEE;AAArD,GAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAwBJ,OAAxB,EAAiC;AACtC,SAAOK,KAAK,CAAC,qCAAqCL,OAAO,CAACM,EAAR,IAAc,EAAnD,CAAD,EAAyD;AACnEC,IAAAA,MAAM,EAAEP,OAAO,CAACM,EAAR,GAAa,KAAb,GAAqB,MADsC;AAEnEE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF0D;AAGnEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,OAAf;AAH6D,GAAzD,CAAL,CAKJY,IALI,CAKCC,cALD,EAMJC,KANI,CAMEC,WANF,CAAP;AAOD;AACD,OAAO,SAASC,WAAT,CAAqBhB,OAArB,EAA8B;AACnC,SAAO,UAAUiB,QAAV,EAAoB;AACzB,WAAOb,cAAc,CAACJ,OAAD,CAAd,CACJY,IADI,CACEI,WAAD,IAAiB;AACrBhB,MAAAA,OAAO,CAACM,EAAR,GACIW,QAAQ,CAACf,oBAAoB,CAACc,WAAD,CAArB,CADZ,GAEIC,QAAQ,CAAClB,oBAAoB,CAACiB,WAAD,CAArB,CAFZ;AAGD,KALI,EAMJF,KANI,CAMGI,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KARI,CAAP;AASD,GAVD;AAWD;AAED,OAAO,eAAeL,cAAf,CAA8BM,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,QAAMH,KAAK,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAApB;AACA,QAAM,IAAIC,KAAJ,CAAUL,KAAV,CAAN;AACD;AAED,OAAO,SAASH,WAAT,CAAqBG,KAArB,EAA2B;AAEhC,QAAMA,KAAN;AACD;AAED,OAAO,SAASM,WAAT,CAAqBC,UAArB,EAAiC;AACtC,SAAO,UAAUR,QAAV,EAAoB;AACzB,QAAIS,GAAG,GAAG,gCAAV;;AACA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,GAAG,GAAGA,GAAG,GAAG,cAAN,GAAuBD,UAA7B;AACD;;AACD,WAAOpB,KAAK,CAACqB,GAAD,CAAL,CACJd,IADI,CACEO,QAAD,IAAcA,QAAQ,CAACE,IAAT,EADf,EAEJT,IAFI,CAEEe,MAAD,IAAYV,QAAQ,CAACvB,kBAAkB,CAACiC,MAAD,CAAnB,CAFrB,CAAP,CALyB,CAOkC;AAC5D,GARD;AASD","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\n\r\nexport function getProductsSuccess(products) {\r\n  return { type: actionTypes.GET_PRODUCTS_SUCCESS, payload: products };\r\n  //getcategoriessuccess için yeni state'imiz categories olacak demek\r\n}\r\n\r\nexport function createProductSuccess(product) {\r\n  return { type: actionTypes.CREATE_PRODUCT_SUCCESS, payload: product };\r\n}\r\n\r\nexport function updateProductSuccess(product) {\r\n  return { type: actionTypes.UPDATE_PRODUCT_SUCCESS, payload: product };\r\n}\r\n\r\nexport function saveProductApi(product) {\r\n  return fetch(\"http://localhost:3000/products/\" + (product.id || \"\"), {\r\n    method: product.id ? \"PUT\" : \"POST\",\r\n    headers: { \"content-type\": \"application/json\" },\r\n    body: JSON.stringify(product),\r\n  })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\nexport function saveProduct(product) {\r\n  return function (dispatch) {\r\n    return saveProductApi(product)\r\n      .then((saveProduct) => {\r\n        product.id\r\n          ? dispatch(updateProductSuccess(saveProduct))\r\n          : dispatch(createProductSuccess(saveProduct));\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\nexport async function handleResponse(response) {\r\n  if (response.ok) {\r\n    return response.json();\r\n  }\r\n  const error = await response.text();\r\n  throw new Error(error);\r\n}\r\n\r\nexport function handleError(error){\r\n  \r\n  throw error;\r\n}\r\n\r\nexport function getProducts(categoryId) {\r\n  return function (dispatch) {\r\n    let url = \"http://localhost:3000/products\";\r\n    if (categoryId) {\r\n      url = url + \"?categoryId=\" + categoryId;\r\n    }\r\n    return fetch(url)\r\n      .then((response) => response.json())\r\n      .then((result) => dispatch(getProductsSuccess(result))); //dispatch=yakalamak,ele geçirmek\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}